import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler
)
from asgiref.sync import sync_to_async
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from main.models import Subscription

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
PRICE, ROOMS, FLAT_AREA, DISTRICT, METRO_DISTANCE, CONFIRM = range(6)


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_price_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–æ 35000‚ÇΩ", callback_data="price_0_35000")],
        [InlineKeyboardButton("35000-45000‚ÇΩ", callback_data="price_35000_45000")],
        [InlineKeyboardButton("45000-65000‚ÇΩ", callback_data="price_45000_65000")],
        [InlineKeyboardButton("65000-100000‚ÇΩ", callback_data="price_65000_100000")],
        [InlineKeyboardButton("–ë–æ–ª–µ–µ 100000‚ÇΩ", callback_data="price_100000_999999999")],
        [InlineKeyboardButton("–ù–µ –≤–∞–∂–Ω–æ", callback_data="price_any")],
    ])


def get_rooms_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°—Ç—É–¥–∏—è", callback_data="rooms_0_0")],
        [InlineKeyboardButton("1 –∫–æ–º–Ω–∞—Ç–∞", callback_data="rooms_1_1")],
        [InlineKeyboardButton("2 –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms_2_2")],
        [InlineKeyboardButton("3 –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms_3_3")],
        [InlineKeyboardButton("4+ –∫–æ–º–Ω–∞—Ç", callback_data="rooms_4_10")],
        [InlineKeyboardButton("–ù–µ –≤–∞–∂–Ω–æ", callback_data="rooms_any")],
    ])


def get_area_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–æ 30 –º¬≤", callback_data="area_0_30")],
        [InlineKeyboardButton("30-50 –º¬≤", callback_data="area_30_50")],
        [InlineKeyboardButton("50-70 –º¬≤", callback_data="area_50_70")],
        [InlineKeyboardButton("70-90 –º¬≤", callback_data="area_70_90")],
        [InlineKeyboardButton("–ë–æ–ª–µ–µ 90 –º¬≤", callback_data="area_90_999")],
        [InlineKeyboardButton("–ù–µ –≤–∞–∂–Ω–æ", callback_data="area_any")],
    ])


def get_district_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–¶–ê–û", callback_data="district_CAO")],
        [InlineKeyboardButton("–Æ–ê–û", callback_data="district_YUAO")],
        [InlineKeyboardButton("–°–ê–û", callback_data="district_SAO")],
        [InlineKeyboardButton("–ó–ê–û", callback_data="district_ZAO")],
        [InlineKeyboardButton("–í–ê–û", callback_data="district_VAO")],
        [InlineKeyboardButton("–ù–µ –≤–∞–∂–Ω–æ", callback_data="district_ANY")],
    ])


def get_metro_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–æ 5 –º–∏–Ω—É—Ç (400–º)", callback_data="metro_400")],
        [InlineKeyboardButton("–î–æ 10 –º–∏–Ω—É—Ç (800–º)", callback_data="metro_800")],
        [InlineKeyboardButton("–î–æ 15 –º–∏–Ω—É—Ç (1200–º)", callback_data="metro_1200")],
        [InlineKeyboardButton("–î–æ 20 –º–∏–Ω—É—Ç (1600–º)", callback_data="metro_1600")],
        [InlineKeyboardButton("–ù–µ –≤–∞–∂–Ω–æ", callback_data="metro_any")],
    ])


def get_confirm_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
        ],
    ])


def get_main_keyboard():
    keyboard = [
        [KeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")],
        [KeyboardButton("üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton("‚ÑπÔ∏è –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton("‚ùå –û—Ç–ø–∏—Å–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# --- –†–∞–±–æ—Ç–∞ —Å –ë–î ---
@sync_to_async
def get_subscription(user_id):
    try:
        return Subscription.objects.get(user_id=user_id)
    except Subscription.DoesNotExist:
        return None


@sync_to_async
def update_or_create_subscription(user_id, username, params):
    return Subscription.objects.update_or_create(
        user_id=user_id,
        defaults={
            'username': username,
            'min_price': params.get('min_price'),
            'max_price': params.get('max_price'),
            'min_rooms': params.get('min_rooms'),
            'max_rooms': params.get('max_rooms'),
            'min_flat': params.get('min_flat'),
            'max_flat': params.get('max_flat'),
            'district': params.get('district', 'ANY'),
            'max_metro_distance': params.get('max_metro_distance'),
            'is_active': True
        }
    )


@sync_to_async
def deactivate_subscription(user_id):
    try:
        sub = Subscription.objects.get(user_id=user_id)
        sub.is_active = False
        sub.save()
        return True
    except Subscription.DoesNotExist:
        return False


# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üè° –ë–æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è,\n\n"
        "/my_subscription - –º–æ—è –ø–æ–¥–ø–∏—Å–∫–∞,\n\n"
        "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è",
        reply_markup=get_main_keyboard()
    )


async def subscribe(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:",
        reply_markup=get_price_keyboard()  # –¢–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∏
    )
    return PRICE


async def process_price(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    if data[1] == 'any':
        context.user_data['min_price'] = None
        context.user_data['max_price'] = None
    else:
        context.user_data['min_price'] = int(data[1])
        context.user_data['max_price'] = int(data[2])

    await query.edit_message_text(
        "üö™ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=get_rooms_keyboard()
    )
    return ROOMS


async def process_rooms(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    if data[1] == 'any':
        context.user_data['min_rooms'] = None
        context.user_data['max_rooms'] = None
    else:
        context.user_data['min_rooms'] = int(data[1])
        context.user_data['max_rooms'] = int(data[2])

    await query.edit_message_text(
        "üìè –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã:",
        reply_markup=get_area_keyboard()
    )
    return FLAT_AREA


async def process_area(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    if data[1] == 'any':
        context.user_data['min_flat'] = None
        context.user_data['max_flat'] = None
    else:
        context.user_data['min_flat'] = int(data[1])
        context.user_data['max_flat'] = int(data[2])

    await query.edit_message_text(
        "üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–≥:",
        reply_markup=get_district_keyboard()
    )
    return DISTRICT


async def process_district(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    context.user_data['district'] = data[1]

    await query.edit_message_text(
        "üöá –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Ç—Ä–æ:",
        reply_markup=get_metro_keyboard()
    )
    return METRO_DISTANCE


async def process_metro(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    if data[1] == 'any':
        context.user_data['max_metro_distance'] = None
    else:
        context.user_data['max_metro_distance'] = int(data[1])

    district_name = dict(Subscription.DISTRICT_CHOICES).get(
        context.user_data.get('district'), '–ù–µ –≤–∞–∂–Ω–æ'
    )

    summary = (
        "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        f"‚Ä¢ –¶–µ–Ω–∞: {context.user_data.get('min_price', '–Ω–µ –≤–∞–∂–Ω–æ')} - {context.user_data.get('max_price', '–Ω–µ –≤–∞–∂–Ω–æ')} —Ä—É–±\n"
        f"‚Ä¢ –ö–æ–º–Ω–∞—Ç: {context.user_data.get('min_rooms', '–Ω–µ –≤–∞–∂–Ω–æ')}-{context.user_data.get('max_rooms', '–Ω–µ –≤–∞–∂–Ω–æ')}\n"
        f"‚Ä¢ –ü–ª–æ—â–∞–¥—å: {context.user_data.get('min_flat', '–Ω–µ –≤–∞–∂–Ω–æ')}-{context.user_data.get('max_flat', '–Ω–µ –≤–∞–∂–Ω–æ')} –º¬≤\n"
        f"‚Ä¢ –û–∫—Ä—É–≥: {district_name}\n"
        f"‚Ä¢ –î–æ –º–µ—Ç—Ä–æ: ‚â§{context.user_data.get('max_metro_distance', '–Ω–µ –≤–∞–∂–Ω–æ')} –º\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä:"
    )

    await query.edit_message_text(
        text=summary,
        reply_markup=get_confirm_keyboard()
    )
    return CONFIRM


async def process_confirmation(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == 'confirm_yes':
        user = update.effective_user
        await update_or_create_subscription(
            user_id=user.id,
            username=user.username,
            params=context.user_data
        )
        await query.edit_message_text("üéâ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º:",
            reply_markup=get_main_keyboard()
        )
    else:
        await query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º:",
            reply_markup=get_main_keyboard()
        )

    context.user_data.clear()
    return ConversationHandler.END


async def cancel(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END


async def my_subscription(update: Update, context: CallbackContext) -> None:
    sub = await get_subscription(update.effective_user.id)
    if sub:
        district_name = dict(Subscription.DISTRICT_CHOICES).get(sub.district, '–ù–µ –≤–∞–∂–Ω–æ')
        text = (
            "üìã –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:\n\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {sub.min_price or '–Ω–µ –≤–∞–∂–Ω–æ'} - {sub.max_price or '–Ω–µ –≤–∞–∂–Ω–æ'} —Ä—É–±\n"
            f"‚Ä¢ –ö–æ–º–Ω–∞—Ç: {sub.min_rooms or '–Ω–µ –≤–∞–∂–Ω–æ'}-{sub.max_rooms or '–Ω–µ –≤–∞–∂–Ω–æ'}\n"
            f"‚Ä¢ –ü–ª–æ—â–∞–¥—å: {sub.min_flat or '–Ω–µ –≤–∞–∂–Ω–æ'}-{sub.max_flat or '–Ω–µ –≤–∞–∂–Ω–æ'} –º¬≤\n"
            f"‚Ä¢ –û–∫—Ä—É–≥: {district_name}\n"
            f"‚Ä¢ –î–æ –º–µ—Ç—Ä–æ: ‚â§{sub.max_metro_distance or '–Ω–µ –≤–∞–∂–Ω–æ'} –º\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª"
        )
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª"

    await update.message.reply_text(text, reply_markup=get_main_keyboard())


async def unsubscribe(update: Update, context: CallbackContext) -> None:
    if await deactivate_subscription(update.effective_user.id):
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=get_main_keyboard())


def main() -> None:
    application = Application.builder().token(os.getenv("TOKEN3")).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è$"), subscribe)],
        states={
            PRICE: [CallbackQueryHandler(process_price, pattern="^price_")],
            ROOMS: [CallbackQueryHandler(process_rooms, pattern="^rooms_")],
            FLAT_AREA: [CallbackQueryHandler(process_area, pattern="^area_")],
            DISTRICT: [CallbackQueryHandler(process_district, pattern="^district_")],
            METRO_DISTANCE: [CallbackQueryHandler(process_metro, pattern="^metro_")],
            CONFIRM: [CallbackQueryHandler(process_confirmation, pattern="^confirm_")],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex("^‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç$"), cancel),
            MessageHandler(filters.COMMAND, cancel),
        ],
    )

    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex("^‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç$"), start))
    application.add_handler(MessageHandler(filters.Regex("^üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è$"), subscribe))
    application.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞$"), my_subscription))
    application.add_handler(MessageHandler(filters.Regex("^‚ùå –û—Ç–ø–∏—Å–∫–∞$"), unsubscribe))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("my_subscription", my_subscription))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
