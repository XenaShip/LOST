import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, \
    InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler
)
from asgiref.sync import sync_to_async
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from main.models import Subscription

import re

MODERATION_CHANNEL_ID = int(os.getenv("MODERATION_CHANNEL_ID", "0"))  # ID –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
TERMS_MAX_LEN = int(os.getenv("TERMS_MAX_LEN", "180"))                # –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è "–£—Å–ª–æ–≤–∏—è"
DESC_MAX_LEN  = int(os.getenv("DESC_MAX_LEN",  "800"))                # –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è "–û–ø–∏—Å–∞–Ω–∏–µ"
MENU_INLINE_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="offer_menu")]
])
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
PRICE, ROOMS, FLAT_AREA, DISTRICT, METRO_DISTANCE, CONFIRM = range(6)
(O_PRICE, O_ADDRESS, O_ROOMS, O_AREA, O_FLOOR, O_TERMS, O_DESC, O_CONTACTS, O_PHOTOS, O_PREVIEW) = range(100, 110)
O_EDIT = 110

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_price_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–æ 35.000—Ä",    callback_data="price_to_35000")],
        [InlineKeyboardButton("–î–æ 65.000—Ä",    callback_data="price_to_65000")],
        [InlineKeyboardButton("–î–æ 100.000—Ä",   callback_data="price_to_100000")],
        [InlineKeyboardButton("–ë–æ–ª–µ–µ 100.000—Ä", callback_data="price_over_100000")],
        [InlineKeyboardButton("–ù–µ –≤–∞–∂–Ω–æ",       callback_data="price_any")],
    ])

def get_rooms_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°—Ç—É–¥–∏—è", callback_data="rooms_0_0")],
        [InlineKeyboardButton("1 –∫–æ–º–Ω–∞—Ç–∞", callback_data="rooms_1_1")],
        [InlineKeyboardButton("2 –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms_2_2")],
        [InlineKeyboardButton("3 –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms_3_3")],
        [InlineKeyboardButton("4+ –∫–æ–º–Ω–∞—Ç", callback_data="rooms_4_10")],
        [InlineKeyboardButton("–ù–µ –≤–∞–∂–Ω–æ", callback_data="rooms_any")],
    ])


def get_area_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–æ 30 –º¬≤", callback_data="area_0_30")],
        [InlineKeyboardButton("30-50 –º¬≤", callback_data="area_30_50")],
        [InlineKeyboardButton("50-70 –º¬≤", callback_data="area_50_70")],
        [InlineKeyboardButton("70-90 –º¬≤", callback_data="area_70_90")],
        [InlineKeyboardButton("–ë–æ–ª–µ–µ 90 –º¬≤", callback_data="area_90_999")],
        [InlineKeyboardButton("–ù–µ –≤–∞–∂–Ω–æ", callback_data="area_any")],
    ])


def get_district_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–¶–ê–û", callback_data="district_CAO")],
        [InlineKeyboardButton("–Æ–ê–û", callback_data="district_YUAO")],
        [InlineKeyboardButton("–°–ê–û", callback_data="district_SAO")],
        [InlineKeyboardButton("–ó–ê–û", callback_data="district_ZAO")],
        [InlineKeyboardButton("–í–ê–û", callback_data="district_VAO")],
        [InlineKeyboardButton("–ù–µ –≤–∞–∂–Ω–æ", callback_data="district_ANY")],
    ])



def get_metro_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ë–ª–∏–∑–∫–æ", callback_data="metro_close")],
        [InlineKeyboardButton("üö´ –ù–µ –≤–∞–∂–Ω–æ",        callback_data="metro_any")],
    ])


def get_confirm_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
        ],
    ])


def get_main_keyboard():
    keyboard = [
        [KeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")],
        [KeyboardButton("üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton("‚ÑπÔ∏è –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton("üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë")],
        [KeyboardButton("‚ùå –û—Ç–ø–∏—Å–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_offer_rooms_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°—Ç—É–¥–∏—è",  callback_data="offer_rooms_studio"),
         InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç–∞", callback_data="offer_rooms_room")],
        [InlineKeyboardButton("1", callback_data="offer_rooms_1"),
         InlineKeyboardButton("2", callback_data="offer_rooms_2"),
         InlineKeyboardButton("3", callback_data="offer_rooms_3"),
         InlineKeyboardButton("4+", callback_data="offer_rooms_4plus")],
    ])

def get_offer_photos_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="offer_photos_done")],
    ])

def _digits(text: str) -> str:
    return re.sub(r"[^\d]", "", text or "")

def _is_valid_contact(s: str) -> bool:
    s = (s or "").strip()
    if s.startswith("tg://user?id="):
        return True
    if s.startswith("@") and len(s) >= 5:
        return True
    if "t.me/" in s or s.startswith("https://t.me/") or s.startswith("http://t.me/"):
        return True
    if re.fullmatch(r"\+?\d[\d \-]{7,}", s):
        return True
    return False


def build_offer_text(d: dict) -> str:
    parts = []
    parts.append(f"üí∞ –¶–µ–Ω–∞: {d['price']} ‚ÇΩ")
    parts.append(f"üìç –ê–¥—Ä–µ—Å: {d['address']}")
    parts.append(f"üè† –ö–æ–º–Ω–∞—Ç—ã: {d['rooms']}")
    parts.append(f"üìê –ü–ª–æ—â–∞–¥—å: {d['area']} –º¬≤")
    parts.append(f"üè¢ –≠—Ç–∞–∂: {d['floor']}")
    parts.append(f"‚öôÔ∏è –£—Å–ª–æ–≤–∏—è: {d['terms']}")
    parts.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {d['desc']}")
    author = d.get('author', '')
    if author:
        parts.append(f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {author}")
    return "\n".join(parts)


async def show_offer_preview(update: Update, context: CallbackContext, edit_via="edit") -> int:
    preview = build_offer_text(context.user_data) + f"\nüñº –§–æ—Ç–æ: {len(context.user_data.get('photos', []))} —à—Ç."
    if edit_via == "edit":
        q = update.callback_query
        await q.edit_message_text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–Ω–Ω—ã–µ:\n\n" + preview,
                                  reply_markup=build_offer_preview_kb())
    else:
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–Ω–Ω—ã–µ:\n\n" + preview,
                                        reply_markup=build_offer_preview_kb())
    return O_PREVIEW



def build_offer_preview_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úè –¶–µ–Ω–∞", callback_data="offer_edit_price"),
         InlineKeyboardButton("‚úè –ê–¥—Ä–µ—Å", callback_data="offer_edit_address")],
        [InlineKeyboardButton("‚úè –ö–æ–º–Ω–∞—Ç—ã", callback_data="offer_edit_rooms"),
         InlineKeyboardButton("‚úè –ü–ª–æ—â–∞–¥—å", callback_data="offer_edit_area")],
        [InlineKeyboardButton("‚úè –≠—Ç–∞–∂", callback_data="offer_edit_floor"),
         InlineKeyboardButton("‚úè –£—Å–ª–æ–≤–∏—è", callback_data="offer_edit_terms")],
        [InlineKeyboardButton("‚úè –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="offer_edit_desc")],
        [InlineKeyboardButton("üñº –§–æ—Ç–æ (–∏–∑–º–µ–Ω–∏—Ç—å)", callback_data="offer_edit_photos")],
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="offer_publish"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="offer_cancel")],
    ])

async def offer_start(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (–≤ ‚ÇΩ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 65000"
    "\n\n"
    "----------------"
    "\n"
    "‚ö†Ô∏è–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –µ—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã, –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –µ–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å!",
        reply_markup=get_main_keyboard()
    )
    return O_PRICE

async def offer_price(update: Update, context: CallbackContext) -> int:
    val = _digits(update.message.text)
    if not val:
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 65000")
        return O_PRICE
    context.user_data['price'] = int(val)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, —Ä–∞–π–æ–Ω –∏ —Ç.–ø.):")
    return O_ADDRESS

async def offer_address(update: Update, context: CallbackContext) -> int:
    text = (update.message.text or "").strip()
    if len(text) < 5:
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return O_ADDRESS
    context.user_data['address'] = text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø/–∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç:", reply_markup=get_offer_rooms_keyboard())
    return O_ROOMS


async def offer_rooms_cb(update: Update, context: CallbackContext) -> int:
    q = update.callback_query
    await q.answer()
    data = q.data  # offer_rooms_...
    mapping = {
        "offer_rooms_studio": "–°—Ç—É–¥–∏—è",
        "offer_rooms_room":   "–ö–æ–º–Ω–∞—Ç–∞",
        "offer_rooms_1":      "1",
        "offer_rooms_2":      "2",
        "offer_rooms_3":      "3",
        "offer_rooms_4plus":  "4+",
    }
    context.user_data['rooms'] = mapping.get(data, "‚Äî")

    # –ï—Å–ª–∏ –º—ã –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
    if context.user_data.get('edit_field') == 'rooms':
        context.user_data.pop('edit_field', None)
        # –ø–æ–∫–∞–∂–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —ç—Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
        return await show_offer_preview(update, context, edit_via="edit")

    # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    await q.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å (–º¬≤), –Ω–∞–ø—Ä–∏–º–µ—Ä: 42")
    return O_AREA


async def offer_area(update: Update, context: CallbackContext) -> int:
    val = _digits(update.message.text)
    if not val:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 42")
        return O_AREA
    context.user_data['area'] = int(val)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–∂ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5 –∏–∑ 17):")
    return O_FLOOR

async def offer_floor(update: Update, context: CallbackContext) -> int:
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5 –∏–∑ 17")
        return O_FLOOR
    context.user_data['floor'] = text
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è (–¥–æ {TERMS_MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤)"
    "\n\n"
    "----------------"
    "\n"
    "‚ö†Ô∏è–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –µ—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã, –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –µ–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å!")
    return O_TERMS

async def offer_terms(update: Update, context: CallbackContext) -> int:
    text = (update.message.text or "").strip()
    if len(text) > TERMS_MAX_LEN:
        await update.message.reply_text(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ {TERMS_MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤.")
        return O_TERMS
    context.user_data['terms'] = text or "‚Äî"
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ {DESC_MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤)"
        "\n\n"
        "----------------"
        "\n"
        "‚ö†Ô∏è–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –µ—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã, –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –µ–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å!"
    )
    return O_DESC

async def offer_desc(update: Update, context: CallbackContext) -> int:
    text = (update.message.text or "").strip()
    if len(text) > DESC_MAX_LEN:
        await update.message.reply_text(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ {DESC_MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤.")
        return O_DESC
    context.user_data['desc'] = text or "‚Äî"

    # –ê–≤—Ç–æ—Ä ‚Äî –∏–∑ Telegram-–ø—Ä–æ—Ñ–∏–ª—è
    user = update.effective_user
    context.user_data['author'] = f"@{user.username}" if user and user.username else f"id:{user.id if user else '-'}"

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ñ–æ—Ç–æ
    context.user_data['photos'] = []

    await update.message.reply_text(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 –∏ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º–æ–º –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–π). "
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=get_offer_photos_keyboard()
    )
    return O_PHOTOS


async def offer_photos(update: Update, context: CallbackContext) -> int:
    photos = context.user_data.get('photos', [])
    if not update.message.photo:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
                                        reply_markup=get_offer_photos_keyboard())
        return O_PHOTOS

    if len(photos) >= 10:
        await update.message.reply_text("–£–∂–µ 10 —Ñ–æ—Ç–æ, –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
                                        reply_markup=get_offer_photos_keyboard())
        return O_PHOTOS

    # –±–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é –∫–∞–∫ file_id
    file_id = update.message.photo[-1].file_id
    photos.append(file_id)
    context.user_data['photos'] = photos

    await update.message.reply_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ {len(photos)}/10. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=get_offer_photos_keyboard()
    )
    return O_PHOTOS


async def offer_photos_done(update: Update, context: CallbackContext) -> int:
    q = update.callback_query
    await q.answer()
    photos = context.user_data.get('photos', [])
    if not photos:
        await q.edit_message_text(
            "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ —Ñ–æ—Ç–æ. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=get_offer_photos_keyboard()
        )
        return O_PHOTOS
    return await show_offer_preview(update, context, edit_via="edit")


async def offer_photos_skip(update: Update, context: CallbackContext) -> int:
    q = update.callback_query
    await q.answer()
    await q.edit_message_text(
        "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ —Ñ–æ—Ç–æ. "
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=get_offer_photos_keyboard()
    )
    return O_PHOTOS


async def offer_edit_router(update: Update, context: CallbackContext) -> int:
    q = update.callback_query
    await q.answer()
    action = q.data  # –æ–∂–∏–¥–∞–µ–º offer_edit_*
    # –∑–∞–ø–æ–º–Ω–∏–º ¬´–∫–∞–∫–æ–µ –ø–æ–ª–µ –ø—Ä–∞–≤–∏–º¬ª (–Ω—É–∂–Ω–æ –¥–ª—è offer_edit_input)
    field = action.replace("offer_edit_", "")
    context.user_data['edit_field'] = field

    # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: —Ñ–æ—Ç–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —à–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
    if field == "photos":
        await q.edit_message_text(
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 –∏ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º–æ–º –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–π). "
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=get_offer_photos_keyboard()
        )
        return O_PHOTOS

    # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: –∫–æ–º–Ω–∞—Ç—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç
    if field == "rooms":
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø/–∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç:", reply_markup=get_offer_rooms_keyboard())
        return O_ROOMS  # —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ offer_rooms_cb

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º
    prompts = {
        "price":    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: 65000",
        "address":  "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å",
        "area":     "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å (–º¬≤), –Ω–∞–ø—Ä–∏–º–µ—Ä: 42",
        "floor":    "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5 –∏–∑ 17)",
        "terms":    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è (–¥–æ {TERMS_MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤)",
        "desc":     f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ {DESC_MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤)",
    }

    await q.edit_message_text(prompts.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"))
    return O_EDIT  # ‚Üê –∂–¥—ë–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


async def offer_edit_input(update: Update, context: CallbackContext) -> int:
    field = context.user_data.get('edit_field')
    text = (update.message.text or "").strip()

    # –¶–µ–Ω–∞
    if field == "price":
        val = _digits(text)  # —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Ö–µ–ª–ø–µ—Ä; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤—ã—Ç–∞—â–∏ —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ re
        if not val:
            await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 65000")
            return O_EDIT
        context.user_data['price'] = int(val)

    # –ê–¥—Ä–µ—Å
    elif field == "address":
        if len(text) < 5:
            await update.message.reply_text("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return O_EDIT
        context.user_data['address'] = text

    # –ü–ª–æ—â–∞–¥—å
    elif field == "area":
        val = _digits(text)
        if not val:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 42")
            return O_EDIT
        context.user_data['area'] = int(val)

    # –≠—Ç–∞–∂
    elif field == "floor":
        if not text:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5 –∏–∑ 17")
            return O_EDIT
        context.user_data['floor'] = text

    # –£—Å–ª–æ–≤–∏—è
    elif field == "terms":
        if len(text) > TERMS_MAX_LEN:
            await update.message.reply_text(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ {TERMS_MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤.")
            return O_EDIT
        context.user_data['terms'] = text or "‚Äî"

    # –û–ø–∏—Å–∞–Ω–∏–µ
    elif field == "desc":
        if len(text) > DESC_MAX_LEN:
            await update.message.reply_text(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ {DESC_MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤.")
            return O_EDIT
        context.user_data['desc'] = text or "‚Äî"
    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ. –í–µ—Ä–Ω—ë–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É.")
        return await show_offer_preview(update, context, edit_via="send")

    # –û—á–∏—Å—Ç–∏–º –º–∞—Ä–∫–µ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–µ—Ä–Ω—ë–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
    context.user_data.pop('edit_field', None)
    return await show_offer_preview(update, context, edit_via="send")



async def offer_publish(update: Update, context: CallbackContext) -> int:
    q = update.callback_query
    await q.answer()

    photos = context.user_data.get('photos', [])
    if not photos:
        await q.edit_message_text(
            "–ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ. "
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=get_offer_photos_keyboard()
        )
        return O_PHOTOS
    q = update.callback_query
    await q.answer()
    text = build_offer_text(context.user_data)

    if not MODERATION_CHANNEL_ID:
        await q.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω MODERATION_CHANNEL_ID –≤ .env. –£–∫–∞–∂–∏ ID –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        context.user_data.clear()
        return ConversationHandler.END

    try:
        await context.bot.send_message(chat_id=MODERATION_CHANNEL_ID, text=text)
        photos = context.user_data.get('photos', [])[:10]
        if photos:
            media = [InputMediaPhoto(media=pid) for pid in photos]
            await context.bot.send_media_group(chat_id=MODERATION_CHANNEL_ID, media=media)

    except Exception as e:
        await q.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        context.user_data.clear()
        return ConversationHandler.END

    await q.edit_message_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n–ú—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –≤–∞—à –ø–æ—Å—Ç –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=MENU_INLINE_KB
    )
    context.user_data.clear()
    return ConversationHandler.END


async def offer_cancel_cb(update: Update, context: CallbackContext) -> int:
    q = update.callback_query
    await q.answer()
    await q.edit_message_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=MENU_INLINE_KB
    )
    context.user_data.clear()
    return ConversationHandler.END


# --- –†–∞–±–æ—Ç–∞ —Å –ë–î ---
@sync_to_async
def get_subscription(user_id):
    try:
        return Subscription.objects.get(user_id=user_id)
    except Subscription.DoesNotExist:
        return None


@sync_to_async
def update_or_create_subscription(user_id, username, params):
    return Subscription.objects.update_or_create(
        user_id=user_id,
        defaults={
            'username': username,
            'min_price': params.get('min_price'),
            'max_price': params.get('max_price'),
            'min_rooms': params.get('min_rooms'),
            'max_rooms': params.get('max_rooms'),
            'min_flat': params.get('min_flat'),
            'max_flat': params.get('max_flat'),
            'district': params.get('district', 'ANY'),
            'metro_close': params.get('metro_close', False),
            'is_active': True
        }
    )


@sync_to_async
def deactivate_subscription(user_id):
    try:
        sub = Subscription.objects.get(user_id=user_id)
        sub.is_active = False
        sub.save()
        return True
    except Subscription.DoesNotExist:
        return False


# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üè° –ë–æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "/offer - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ,\n\n"
        "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è,\n\n"
        "/my_subscription - –º–æ—è –ø–æ–¥–ø–∏—Å–∫–∞,\n\n"
        "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è",
        reply_markup=get_main_keyboard()
    )


async def subscribe(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:",
        reply_markup=get_price_keyboard()  # –¢–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∏
    )
    return PRICE


async def process_price(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    cb = query.data
    if cb == "price_any":
        context.user_data['min_price'] = None
        context.user_data['max_price'] = None
    elif cb == "price_to_35000":
        context.user_data['min_price'] = 0
        context.user_data['max_price'] = 35000
    elif cb == "price_to_65000":
        context.user_data['min_price'] = 35000
        context.user_data['max_price'] = 65000
    elif cb == "price_to_100000":
        context.user_data['min_price'] = 50000
        context.user_data['max_price'] = 100000
    elif cb == "price_over_100000":
        context.user_data['min_price'] = 100000
        context.user_data['max_price'] = None
    else:
        parts = cb.split('_')
        if len(parts) == 3:
            context.user_data['min_price'] = int(parts[1]) if parts[1] != 'any' else None
            context.user_data['max_price'] = int(parts[2]) if parts[2] != 'any' else None
        else:
            context.user_data['min_price'] = None
            context.user_data['max_price'] = None

    # –°–Ω–∏–º–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–µ–Ω–∞–º–∏ (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π)
    try:
        await query.edit_message_reply_markup(None)
    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–∏–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç
    await query.message.reply_text(
        "üö™ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=get_rooms_keyboard()
    )
    return ROOMS


async def process_rooms(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    if data[1] == 'any':
        context.user_data['min_rooms'] = None
        context.user_data['max_rooms'] = None
    else:
        context.user_data['min_rooms'] = int(data[1])
        context.user_data['max_rooms'] = int(data[2])

    await query.edit_message_text(
        "üìè –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã:",
        reply_markup=get_area_keyboard()
    )
    return FLAT_AREA


async def process_area(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    if data[1] == 'any':
        context.user_data['min_flat'] = None
        context.user_data['max_flat'] = None
    else:
        context.user_data['min_flat'] = int(data[1])
        context.user_data['max_flat'] = int(data[2])

    await query.edit_message_text(
        "üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–≥:",
        reply_markup=get_district_keyboard()
    )
    return DISTRICT


async def process_district(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    context.user_data['district'] = data[1]

    await query.edit_message_text(
        "üöá –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Ç—Ä–æ:",
        reply_markup=get_metro_keyboard()
    )
    return METRO_DISTANCE


async def process_metro(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if query.data == 'metro_close':
        context.user_data['metro_close'] = True
    else:  # 'metro_any'
        context.user_data['metro_close'] = False

    # –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–∞
    district_name = dict(Subscription.DISTRICT_CHOICES).get(
        context.user_data.get('district'),
        '–ù–µ –≤–∞–∂–Ω–æ'
    )
    min_p = context.user_data.get('min_price')
    max_p = context.user_data.get('max_price')
    if min_p is None and max_p is None:
        price_text = "–Ω–µ –≤–∞–∂–Ω–æ"
    elif min_p is None:
        price_text = f"–¥–æ {max_p} ‚ÇΩ"
    elif max_p is None:
        price_text = f"–æ—Ç {min_p} ‚ÇΩ"
    else:
        price_text = f"{min_p}-{max_p} ‚ÇΩ"
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
    summary = (
        "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        f"‚Ä¢ –¶–µ–Ω–∞: {price_text}\n"
        f"‚Ä¢ –ö–æ–º–Ω–∞—Ç: {context.user_data.get('min_rooms', '–Ω–µ –≤–∞–∂–Ω–æ')}-"
        f"{context.user_data.get('max_rooms', '–Ω–µ –≤–∞–∂–Ω–æ')}\n"
        f"‚Ä¢ –ü–ª–æ—â–∞–¥—å: {context.user_data.get('min_flat', '–Ω–µ –≤–∞–∂–Ω–æ')}-"
        f"{context.user_data.get('max_flat', '–Ω–µ –≤–∞–∂–Ω–æ')} –º¬≤\n"
        f"‚Ä¢ –û–∫—Ä—É–≥: {district_name}\n"
        f"‚Ä¢ –î–æ –º–µ—Ç—Ä–æ: {'–ë–ª–∏–∑–∫–æ' if context.user_data['metro_close'] else 'üö´ –Ω–µ –≤–∞–∂–Ω–æ'}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä:"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await query.edit_message_text(
        text=summary,
        reply_markup=get_confirm_keyboard()
    )
    return CONFIRM


async def process_confirmation(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == 'confirm_yes':
        user = update.effective_user
        await update_or_create_subscription(
            user_id=user.id,
            username=user.username,
            params=context.user_data
        )
        await query.edit_message_text("üéâ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º:",
            reply_markup=get_main_keyboard()
        )
    else:
        await query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º:",
            reply_markup=get_main_keyboard()
        )

    context.user_data.clear()
    return ConversationHandler.END


async def cancel(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END


async def my_subscription(update: Update, context: CallbackContext) -> None:
    sub = await get_subscription(update.effective_user.id)
    if sub:
        district_name = dict(Subscription.DISTRICT_CHOICES).get(sub.district, '–ù–µ –≤–∞–∂–Ω–æ')
        metro_text = '–ë–ª–∏–∑–∫–æ' if getattr(sub, 'metro_close', False) else '–Ω–µ –≤–∞–∂–Ω–æ'

        text = (
            "üìã –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:\n\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {sub.min_price or '–Ω–µ –≤–∞–∂–Ω–æ'} - {sub.max_price or '–Ω–µ –≤–∞–∂–Ω–æ'} —Ä—É–±\n"
            f"‚Ä¢ –ö–æ–º–Ω–∞—Ç: {sub.min_rooms or '–Ω–µ –≤–∞–∂–Ω–æ'}-{sub.max_rooms or '–Ω–µ –≤–∞–∂–Ω–æ'}\n"
            f"‚Ä¢ –ü–ª–æ—â–∞–¥—å: {sub.min_flat or '–Ω–µ –≤–∞–∂–Ω–æ'}-{sub.max_flat or '–Ω–µ –≤–∞–∂–Ω–æ'} –º¬≤\n"
            f"‚Ä¢ –û–∫—Ä—É–≥: {district_name}\n"
             f"‚Ä¢ –î–æ –º–µ—Ç—Ä–æ: {metro_text}\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª"
        )
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª"

    await update.message.reply_text(text, reply_markup=get_main_keyboard())

async def offer_to_menu(update: Update, context: CallbackContext) -> None:
    q = update.callback_query
    await q.answer()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await q.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

async def unsubscribe(update: Update, context: CallbackContext) -> None:
    if await deactivate_subscription(update.effective_user.id):
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=get_main_keyboard())


def main() -> None:
    application = Application.builder().token(os.getenv("TOKEN3")).build()
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è$"), subscribe)],
        states={
            PRICE: [CallbackQueryHandler(process_price, pattern="^price_")],
            ROOMS: [CallbackQueryHandler(process_rooms, pattern="^rooms_")],
            FLAT_AREA: [CallbackQueryHandler(process_area, pattern="^area_")],
            DISTRICT: [CallbackQueryHandler(process_district, pattern="^district_")],
            METRO_DISTANCE: [CallbackQueryHandler(process_metro, pattern="^metro_")],
            CONFIRM: [CallbackQueryHandler(process_confirmation, pattern="^confirm_")],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex("^‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç$"), cancel),
            MessageHandler(filters.COMMAND, cancel),
        ],
    )
    offer_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë$"), offer_start),
            CommandHandler("offer", offer_start),
        ],
        states={
            O_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, offer_price)],
            O_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, offer_address)],
            O_ROOMS: [CallbackQueryHandler(offer_rooms_cb, pattern="^offer_rooms_")],
            O_AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, offer_area)],
            O_FLOOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, offer_floor)],
            O_TERMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, offer_terms)],
            O_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, offer_desc)],

            O_PHOTOS: [
                MessageHandler(filters.PHOTO, offer_photos),
                CallbackQueryHandler(offer_photos_done, pattern="^offer_photos_done$"),
                CallbackQueryHandler(offer_photos_skip, pattern="^offer_photos_skip$"),
            ],

            # üÜï –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            O_EDIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, offer_edit_input),
            ],

            O_PREVIEW: [
                # üÜï –ù–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ¬´‚úè ...¬ª
                CallbackQueryHandler(offer_edit_router, pattern="^offer_edit_"),
                CallbackQueryHandler(offer_publish, pattern="^offer_publish$"),
                CallbackQueryHandler(offer_cancel_cb, pattern="^offer_cancel$"),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex("^‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç$"), cancel),
            MessageHandler(filters.COMMAND, cancel),
        ],
    )
    application.add_handler(conv_handler)
    application.add_handler(offer_conv)
    application.add_handler(CallbackQueryHandler(offer_to_menu, pattern="^offer_menu$"))
    application.add_handler(MessageHandler(filters.Regex("^‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç$"), start))
    application.add_handler(MessageHandler(filters.Regex("^üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è$"), subscribe))
    application.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞$"), my_subscription))
    application.add_handler(MessageHandler(filters.Regex("^‚ùå –û—Ç–ø–∏—Å–∫–∞$"), unsubscribe))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("my_subscription", my_subscription))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
