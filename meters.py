import os

import requests
from math import radians, sin, cos, sqrt, atan2

from dotenv import load_dotenv

load_dotenv()

YANDEX_GEOCODER_API_KEY = os.getenv("YANDEX_GEOCODER_API_KEY")
MOSCOW_METRO_STATIONS = {
    "–ê–≤–∏–∞–º–æ—Ç–æ—Ä–Ω–∞—è": (55.751682, 37.717821),
    "–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è": (55.706451, 37.65868),
    "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è": (55.687674, 37.572232),
    "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π —Å–∞–¥": (55.752194, 37.608414),
    "–ê–ª–µ–∫—Å–µ–µ–≤—Å–∫–∞—è": (55.807355, 37.638602),
    "–ê–ª—Ç—É—Ñ—å–µ–≤–æ": (55.897655, 37.587286),
    "–ê–Ω–Ω–∏–Ω–æ": (55.583348, 37.596238),
    "–ê—Ä–±–∞—Ç—Å–∫–∞—è (—Å–∏–Ω—è—è)": (55.752213, 37.603959),
    "–ê—Ä–±–∞—Ç—Å–∫–∞—è (–≥–æ–ª—É–±–∞—è)": (55.752739, 37.605001),
    "–ê—ç—Ä–æ–ø–æ—Ä—Ç": (55.800058, 37.531048),
    "–ë–∞–±—É—à–∫–∏–Ω—Å–∫–∞—è": (55.869944, 37.661632),
    "–ë–∞–≥—Ä–∞—Ç–∏–æ–Ω–æ–≤—Å–∫–∞—è": (55.743117, 37.497338),
    "–ë–∞—Ä—Ä–∏–∫–∞–¥–Ω–∞—è": (55.760324, 37.581974),
    "–ë–∞—É–º–∞–Ω—Å–∫–∞—è": (55.772405, 37.678127),
    "–ë–µ–≥–æ–≤–∞—è": (55.773494, 37.541653),
    "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è": (55.77638, 37.584577),
    "–ë–µ–ª—è–µ–≤–æ": (55.643149, 37.526092),
    "–ë–∏–±–∏—Ä–µ–≤–æ": (55.883119, 37.60365),
    "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–µ–Ω–∏ –õ–µ–Ω–∏–Ω–∞": (55.752287, 37.609344),
    "–ë–æ—Ä–æ–≤–∏—Ü–∫–∞—è": (55.750796, 37.609365),
    "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥": (55.844029, 37.638146),
    "–ë—Ä–∞—Ç–∏—Å–ª–∞–≤—Å–∫–∞—è": (55.658515, 37.750725),
    "–ë—É–ª—å–≤–∞—Ä –î–º–∏—Ç—Ä–∏—è –î–æ–Ω—Å–∫–æ–≥–æ": (55.569411, 37.576221),
    "–í–∞—Ä—à–∞–≤—Å–∫–∞—è": (55.653928, 37.620106),
    "–í–î–ù–•": (55.821517, 37.6415),
    "–í–ª–∞–¥—ã–∫–∏–Ω–æ": (55.847951, 37.590127),
    "–í–æ–¥–Ω—ã–π —Å—Ç–∞–¥–∏–æ–Ω": (55.83918, 37.487288),
    "–í–æ–π–∫–æ–≤—Å–∫–∞—è": (55.818994, 37.497082),
    "–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç": (55.72526, 37.68588),
    "–í–æ–ª–∂—Å–∫–∞—è": (55.690877, 37.752409),
    "–í–æ—Ä–æ–±—å–µ–≤—ã –≥–æ—Ä—ã": (55.710825, 37.55982),
    "–í—ã—Å—Ç–∞–≤–æ—á–Ω–∞—è": (55.750341, 37.541725),
    "–í—ã—Ö–∏–Ω–æ": (55.71525, 37.817894),
    "–ì–æ–≤–æ—Ä–æ–≤–æ": (55.664095, 37.405136),
    "–î–∏–Ω–∞–º–æ": (55.789476, 37.558498),
    "–î–æ–±—Ä—ã–Ω–∏–Ω—Å–∫–∞—è": (55.728914, 37.622527),
    "–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è": (55.610028, 37.717725),
    "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∞—è": (55.781751, 37.613384),
    "–î—É–±—Ä–æ–≤–∫–∞": (55.718387, 37.676119),
    "–ñ—É–ª–µ–±–∏–Ω–æ": (55.684316, 37.856685),
    "–ó—è–±–ª–∏–∫–æ–≤–æ": (55.611637, 37.74511),
    "–ò–∑–º–∞–π–ª–æ–≤—Å–∫–∞—è": (55.787356, 37.781554),
    "–ö–∞–ª—É–∂—Å–∫–∞—è": (55.656871, 37.540695),
    "–ö–∞–Ω—Ç–µ–º–∏—Ä–æ–≤—Å–∫–∞—è": (55.635403, 37.656907),
    "–ö–∞—Ö–æ–≤—Å–∫–∞—è": (55.653314, 37.606749),
    "–ö–∏–µ–≤—Å–∫–∞—è": (55.744595, 37.56692),
    "–ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥": (55.754592, 37.633996),
    "–ö–æ–ª–æ–º–µ–Ω—Å–∫–∞—è": (55.678022, 37.663719),
    "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è": (55.776365, 37.656876),
    "–ö–æ–Ω—å–∫–æ–≤–æ": (55.633312, 37.518231),
    "–ö—Ä–∞—Å–Ω–æ–ø—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è": (55.760172, 37.577751),
    "–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è": (55.780241, 37.666385),
    "–ö—Ä–∞—Å–Ω—ã–µ –í–æ—Ä–æ—Ç–∞": (55.769808, 37.650984),
    "–ö—Ä–µ—Å—Ç—å—è–Ω—Å–∫–∞—è –∑–∞—Å—Ç–∞–≤–∞": (55.733383, 37.667472),
    "–ö—Ä–æ–ø–æ—Ç–∫–∏–Ω—Å–∫–∞—è": (55.745366, 37.603308),
    "–ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç": (55.761195, 37.624417),
    "–ö—É–∑—å–º–∏–Ω–∫–∏": (55.705181, 37.765574),
    "–ö—É–Ω—Ü–µ–≤—Å–∫–∞—è": (55.730201, 37.446024),
    "–ö—É—Ä—Å–∫–∞—è": (55.758463, 37.659116),
    "–ö—É—Ç—É–∑–æ–≤—Å–∫–∞—è": (55.74048, 37.534951),
    "–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç": (55.706533, 37.584589),
    "–õ–µ—Ä–º–æ–Ω—Ç–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç": (55.702368, 37.851869),
    "–õ—É–±—è–Ω–∫–∞": (55.759813, 37.626047),
    "–õ—é–±–ª–∏–Ω–æ": (55.676565, 37.765277),
    "–ú–∞—Ä–∫—Å–∏—Å—Ç—Å–∫–∞—è": (55.741278, 37.653506),
    "–ú–∞—è–∫–æ–≤—Å–∫–∞—è": (55.769808, 37.595426),
    "–ú–µ–¥–≤–µ–¥–∫–æ–≤–æ": (55.887642, 37.661231),
    "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è": (55.747462, 37.533977),
    "–ú–µ–Ω–¥–µ–ª–µ–µ–≤—Å–∫–∞—è": (55.781274, 37.598306),
    "–ú–∏–Ω—Å–∫–∞—è": (55.732548, 37.504122),
    "–ú–∏—Ç–∏–Ω–æ": (55.84593, 37.361295),
    "–ú–æ–ª–æ–¥–µ–∂–Ω–∞—è": (55.740166, 37.416717),
    "–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∞—è": (55.683785, 37.622041),
    "–ù–∞–≥–æ—Ä–Ω–∞—è": (55.672988, 37.610094),
    "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–∞—è": (55.741125, 37.629021),
    "–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥": (55.75715, 37.61577),
    "–ü–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫–∞—è": (55.787635, 37.750234),
    "–ü–∞—Ä–∫ –ö—É–ª—å—Ç—É—Ä—ã": (55.735473, 37.595391),
    "–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã": (55.736251, 37.514865),
    "–ü–µ—Ä–æ–≤–æ": (55.750345, 37.788132),
    "–ü–µ—Ç—Ä–æ–≤—Å–∫–æ-–†–∞–∑—É–º–æ–≤—Å–∫–∞—è": (55.836801, 37.573333),
    "–ü–ª–æ—â–∞–¥—å –ò–ª—å–∏—á–∞": (55.747649, 37.682057),
    "–ü–æ–ª–µ–∂–∞–µ–≤—Å–∫–∞—è": (55.777548, 37.516642),
    "–ü—Ä–∞–∂—Å–∫–∞—è": (55.612409, 37.603137),
    "–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ": (55.676903, 37.504874),
    "–ü—É—à–∫–∏–Ω—Å–∫–∞—è": (55.765396, 37.603475),
    "–†–µ—á–Ω–æ–π –≤–æ–∫–∑–∞–ª": (55.855229, 37.476365),
    "–†–∏–∂—Å–∫–∞—è": (55.792842, 37.63602),
    "–†—è–∑–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç": (55.717905, 37.792258),
    "–°–º–æ–ª–µ–Ω—Å–∫–∞—è": (55.747073, 37.583913),
    "–¢–∞–≥–∞–Ω—Å–∫–∞—è": (55.740994, 37.653306),
    "–¢–≤–µ—Ä—Å–∫–∞—è": (55.765911, 37.605013),
    "–£–ª–∏—Ü–∞ –ê–∫–∞–¥–µ–º–∏–∫–∞ –Ø–Ω–≥–µ–ª—è": (55.595579, 37.601918),
    "–¶–≤–µ—Ç–Ω–æ–π –±—É–ª—å–≤–∞—Ä": (55.771185, 37.620627),
    "–ß–µ—Ö–æ–≤—Å–∫–∞—è": (55.765837, 37.606637),
    "–ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∞—è": (55.640823, 37.606137),
    "–®–∞–±–æ–ª–æ–≤—Å–∫–∞—è": (55.718771, 37.608096),
}



def get_coordinates(address):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞) –ø–æ –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ API –Ø–Ω–¥–µ–∫—Å –ì–µ–æ–∫–æ–¥–µ—Ä–∞"""
    url = "https://geocode-maps.yandex.ru/1.x/"
    params = {
        "apikey": YANDEX_GEOCODER_API_KEY,
        "geocode": address,
        "format": "json"
    }

    response = requests.get(url, params=params)
    if response.status_code != 200:
        print("–û—à–∏–±–∫–∞ API:", response.status_code, response.text)
        return None

    data = response.json()
    try:
        pos = data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["Point"]["pos"]
        lon, lat = map(float, pos.split())
        return lat, lon
    except (KeyError, IndexError):
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞:", address)
        return None


def haversine(lat1, lon1, lat2, lon2):
    R = 6371 * 1000
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat / 2) ** 2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2) ** 2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    return R * c


def find_nearest_metro(lat, lon):
    """–ò—â–µ—Ç –±–ª–∏–∂–∞–π—à—É—é —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π –ú–æ—Å–∫–≤—ã"""
    nearest_station = None
    min_distance = float("inf")

    for station, (m_lat, m_lon) in MOSCOW_METRO_STATIONS.items():
        distance = haversine(lat, lon, m_lat, m_lon)
        if distance < min_distance:
            min_distance = distance
            nearest_station = station, (m_lat, m_lon)

    return nearest_station, min_distance


if __name__ == "__main__":
    address = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: ")
    print("üîç –ó–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—Å –ì–µ–æ–∫–æ–¥–µ—Ä—É...")
    coords = get_coordinates(address)

    if not coords:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞.")
    else:
        print("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞:", coords)

        (metro_name, metro_coords), distance = find_nearest_metro(*coords)

        print(f"üöá –ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ: {metro_name}")
        print("üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Ç—Ä–æ:", metro_coords)
        print(f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ç—Ä–æ: {distance:.2f} –º")
