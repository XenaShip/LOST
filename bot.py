import asyncio
import logging
import re
from telegram import InputMediaVideo
import telethon
import django
from telegram import Bot, InputMediaPhoto
from telegram.error import RetryAfter, BadRequest
from telethon import TelegramClient, events
from dotenv import load_dotenv
from asgiref.sync import sync_to_async
import os
from district import get_district_by_coords, get_coords_by_address
from make_info import process_text_with_gpt_price, process_text_with_gpt_sq, process_text_with_gpt_adress, \
    process_text_with_gpt_rooms
from meters import get_coordinates, find_nearest_metro
from proccess import process_text_with_gpt2, process_text_with_gpt3, process_text_with_gpt

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()

from main.models import  MESSAGE, INFO, Subscription  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)
processed_group_ids = set()      # (chat_id, grouped_id)
processed_message_ids = set()


bot2 = Bot(token=os.getenv("TOKEN3"))
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PHONE_NUMBER = os.getenv('PHONE_NUMBER')
TELEGRAM_PASSWORD = os.getenv('TELEGRAM_PASSWORD')
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
SESSION_NAME = "session_name_lost"
METRO_CLOSE_MAX_METERS = int(os.getenv("METRO_CLOSE_MAX_METERS", "1200"))
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
YANDEX_GPT_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
DOWNLOAD_FOLDER = "downloads/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon
client = TelegramClient(SESSION_NAME, API_ID, API_HASH, system_version='1.2.3-zxc-custom',
                        device_model='aboba-linux-custom', app_version='1.0.1')

async def get_username_by_id(user_id):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        user_id = int(user_id)
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await client.get_entity(user_id)
        if user.username:
            return f"https://t.me/{user.username}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username: {e}")
    return None  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username


async def process_contacts(text: str) -> str | None:
    raw_contact = await asyncio.to_thread(process_text_with_gpt2, text)
    print('process')
    if raw_contact.startswith("tg://user?id="):
        user_id = raw_contact.split("=")[1]
        return await get_username_by_id(user_id) or raw_contact
    return raw_contact


async def download_media(message):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ) –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–ª—å–±–æ–º–æ–≤ (–ø–æ grouped_id).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {'type': 'photo'/'video', 'path': –ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É'}.
    """
    media_list = []
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º grouped_id
    if message.grouped_id:
        album_msgs = await client.get_messages(
            message.chat_id,
            min_id=message.id - 20,
            max_id=message.id + 20
        )
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–≥–æ –∂–µ –∞–ª—å–±–æ–º–∞
        album_msgs = [m for m in album_msgs if m and m.grouped_id == message.grouped_id]
    else:
        album_msgs = [message]

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∞–ª—å–±–æ–º–∞
    for msg in album_msgs:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
        if msg.photo:
            file_path = await client.download_media(msg.photo, DOWNLOAD_FOLDER)
            if file_path:
                media_list.append({'type': 'photo', 'path': file_path})
        elif msg.video:
            file_path = await client.download_media(msg.video, DOWNLOAD_FOLDER)
            if file_path:
                media_list.append({'type': 'video', 'path': file_path})
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    return media_list[:10]


def _is_non_empty_file(path: str) -> bool:
    try:
        return os.path.isfile(path) and os.path.getsize(path) > 0
    except Exception:
        return False

def build_post_text(base_text: str, contacts: str | None, add_quote: bool = True) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:
    ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ '–ö–æ–Ω—Ç–∞–∫—Ç—ã: ...' –æ–¥–∏–Ω —Ä–∞–∑ (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤–∞–ª–∏–¥–Ω—ã–µ)
    ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç —Ü–∏—Ç–∞—Ç—É —Å HTML-—Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞ (–µ—Å–ª–∏ add_quote=True)
    ‚Äî —Å–æ–±–ª—é–¥–∞–µ—Ç –¥–≤–æ–π–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
    """
    text = base_text or ""
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã: –¥–≤–æ–π–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
    lines = [line.strip() for line in text.split("\n") if line.strip()]
    text = "\n\n".join(lines)

    # –¥–æ–±–∞–≤–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    if contacts and contacts.lower() not in ["–Ω–µ—Ç", "–Ω–µ—Ç."] and "–ö–æ–Ω—Ç–∞–∫—Ç—ã:" not in text:
        text += "\n\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: " + contacts

    if add_quote:
        text += (
            "\n\n‚Äî <i>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ "
            "<a href='https://t.me/arendatoriy_find_bot'>–±–æ—Ç–µ</a> "
            "–∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã</i>"
        )
    return text

async def send_media_group(bot, chat_id, text, media_items, parse_mode: str = "HTML"):
    if not media_items:
        await bot.send_message(chat_id, text, parse_mode=parse_mode)
        return

    media_group, open_files, valid_paths = [], [], []

    for item in media_items:
        file_path = item.get("path")
        file_type = item.get("type")
        if not file_path or not _is_non_empty_file(file_path):
            continue
        try:
            f = open(file_path, "rb")
        except Exception:
            continue

        open_files.append(f)
        valid_paths.append((file_path, file_type))
        caption = text if len(media_group) == 0 else None

        if file_type == "photo":
            media_group.append(InputMediaPhoto(media=f, caption=caption, parse_mode=parse_mode))
        else:
            media_group.append(InputMediaVideo(media=f, caption=caption, parse_mode=parse_mode))

    if not media_group:
        await bot.send_message(chat_id, text, parse_mode=parse_mode)
        return

    try:
        if len(media_group) == 1:
            file_path, file_type = valid_paths[0]
            try:
                if open_files:
                    open_files[0].close()
            except Exception:
                pass
            open_files = []

            if not _is_non_empty_file(file_path):
                await bot.send_message(chat_id, text, parse_mode=parse_mode)
                return

            with open(file_path, "rb") as fresh_f:
                if file_type == "photo":
                    await bot.send_photo(chat_id, fresh_f, caption=text, parse_mode=parse_mode)
                else:
                    await bot.send_video(chat_id, fresh_f, caption=text, parse_mode=parse_mode)
        else:
            await bot.send_media_group(chat_id=chat_id, media=media_group)

    except BadRequest as e:
        # –æ—Ç–ø—Ä–∞–≤–∏–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ø–æ—Å—Ç
        await bot.send_message(chat_id, text, parse_mode=parse_mode)
    finally:
        for f in open_files:
            try:
                f.close()
            except Exception:
                pass


async def check_subscriptions_and_notify(info_instance, contacts):
    logger.info(f"üîî –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {info_instance.id}")
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    subscriptions = await sync_to_async(list)(Subscription.objects.filter(is_active=True))
    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(subscriptions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
    if not subscriptions:
        logger.info("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    ad_data = {
        'price': info_instance.price,
        'rooms': info_instance.rooms,
        'count_meters_flat': info_instance.count_meters_flat,  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –ø–ª–æ—â–∞–¥–∏
        'location': info_instance.location,
        'count_meters_metro': info_instance.count_meters_metro,
        'address': info_instance.adress,
        'images': info_instance.message.images,
        'description': info_instance.message.new_text
    }
    matched_users = set()
    for subscription in subscriptions:
        is_match = await sync_to_async(is_ad_match_subscription)(ad_data, subscription)
        if is_match and subscription.user_id not in matched_users:
            matched_users.add(subscription.user_id)
            await send_notification(subscription.user_id, ad_data, info_instance.message, contacts)

def escape_markdown(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def safe_parse_number(value):
    if value is None:
        return None
    if isinstance(value, str):
        value = value.replace(',', '.').strip()
        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É
        value = ''.join(c for c in value if c.isdigit() or c == '.')
    try:
        return float(value)
    except:
        return None


async def send_notification(user_id: int, ad_data: dict, message, contacts):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (python-telegram-bot).
    """
    try:
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ë–î (—É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –≤ new_message_handler)
        safe_text = message.new_text or ""

        # –î–æ–±–∞–≤–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ü–∏—Ç–∞—Ç—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å
        # (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–µ–ª–∞–µ–º —ç—Ç–æ –∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö ‚Äî –≤–¥—Ä—É–≥ —Ç–µ–∫—Å—Ç –≤ –ë–î –±—ã–ª –±–µ–∑ –Ω–∏—Ö)
        safe_text = build_post_text(safe_text, contacts, add_quote=True)

        media_paths = ad_data.get('images') or []
        media_group = []

        for idx, media_path in enumerate(media_paths[:10]):
            caption = safe_text if idx == 0 else None

            if str(media_path).startswith("http"):
                media_group.append(InputMediaPhoto(media=media_path, caption=caption, parse_mode="HTML"))
            elif os.path.exists(media_path):
                media_group.append(InputMediaPhoto(media=open(media_path, "rb"), caption=caption, parse_mode="HTML"))

        await asyncio.sleep(5)

        if media_group:
            if len(media_group) == 1:
                # –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
                await bot2.send_photo(chat_id=user_id, photo=media_group[0].media, caption=safe_text, parse_mode="HTML")
            else:
                # –∞–ª—å–±–æ–º ‚Äî parse_mode –∑–∞–¥–∞–Ω –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ InputMediaPhoto
                await bot2.send_media_group(chat_id=user_id, media=media_group)
        else:
            await bot2.send_message(chat_id=user_id, text=safe_text, parse_mode="HTML")

        logger.info(f"[NOTIFY] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except RetryAfter as e:
        logger.warning(f"[NOTIFY] Flood control, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {e.timeout} —Å–µ–∫.")
        await asyncio.sleep(e.timeout)
        await send_notification(user_id, ad_data, message, contacts)  # –Ω–µ –∑–∞–±—É–¥—å –ø–µ—Ä–µ–¥–∞—Ç—å contacts
    except Exception as e:
        logger.error(f"[NOTIFY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)


def is_ad_match_subscription(ad_data, subscription):
    """
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–µ (–ø–æ–¥ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Ü–µ–Ω—ã):
      –¶–ï–ù–ê:
        1) "–î–æ 35 000‚ÇΩ"         -> min=None,  max=35000
        2) "35‚Äì65 —Ç—ã—Å. ‚ÇΩ"       -> min=35000, max=65000
        3) "50‚Äì100 —Ç—ã—Å. ‚ÇΩ"      -> min=50000, max=100000
        4) "–ù–µ –≤–∞–∂–Ω–æ"           -> min=None,  max=None  (—Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è)

      –î—Ä—É–≥–æ–µ:
        - –ö–æ–º–Ω–∞—Ç—ã: 0 -> 1 (—Å—Ç—É–¥–∏—è = 1 –∫–æ–º–Ω–∞—Ç–∞)
        - –ü–ª–æ—â–∞–¥—å: —Å–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ > 0
        - –†–∞–π–æ–Ω: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ None/ 'ANY'
        - –ú–µ—Ç—Ä–æ: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ <= –ª–∏–º–∏—Ç–∞
    """
    try:
        ad_price = safe_parse_number(ad_data.get('price'))
        ad_rooms = safe_parse_number(ad_data.get('rooms'))
        ad_flat_area = safe_parse_number(ad_data.get('count_meters_flat'))
        ad_metro_distance = safe_parse_number(ad_data.get('count_meters_metro'))

        # –°—Ç—É–¥–∏—è –∫–∞–∫ 1 –∫–æ–º–Ω–∞—Ç–∞
        if ad_rooms == 0:
            ad_rooms = 1

        # ---------- –¶–ï–ù–ê ----------
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–µ –≤–∞–∂–Ω–æ" -> min_price/max_price –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å None
        min_price = getattr(subscription, 'min_price', None)
        max_price = getattr(subscription, 'max_price', None)

        if ad_price is not None:
            if min_price is not None and ad_price < min_price:
                return False
            if max_price is not None and ad_price > max_price:
                return False
        # –ï—Å–ª–∏ ad_price None ‚Äî –Ω–µ –≤–∞–ª–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —à–∞–Ω—Å –¥—Ä—É–≥–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º

        # ---------- –ö–û–ú–ù–ê–¢–´ ----------
        if ad_rooms is not None:
            if getattr(subscription, 'min_rooms', None) is not None and int(ad_rooms) < subscription.min_rooms:
                return False
            if getattr(subscription, 'max_rooms', None) is not None and int(ad_rooms) > subscription.max_rooms:
                return False

        # ---------- –ü–õ–û–©–ê–î–¨ ----------
        if ad_flat_area and ad_flat_area > 0:
            if getattr(subscription, 'min_flat', None) is not None and ad_flat_area < subscription.min_flat:
                return False
            if getattr(subscription, 'max_flat', None) is not None and ad_flat_area > subscription.max_flat:
                return False

        # ---------- –†–ê–ô–û–ù ----------
        sub_district = getattr(subscription, 'district', None)
        if sub_district not in (None, 'ANY'):
            # –ü—Ä–∏–º–µ—Ä: –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ ad_data['location']
            if ad_data.get('location') != sub_district:
                return False

        # ---------- –ú–ï–¢–†–û ----------
        # –£—Å–ª–æ–≤–∏–µ: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ <= –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        max_metro = getattr(subscription, 'max_metro_distance', None)
        if ad_metro_distance is not None and max_metro is not None:
            if ad_metro_distance > max_metro:
                return False

        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}", exc_info=True)
        return False



async def extract_text_from_event(event):
    """
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞ (grouped_id), —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Å–æ –≤—Å–µ—Ö
    —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞ –∏ –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é. –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π text/caption.
    """
    msg = event.message
    if getattr(msg, "grouped_id", None):
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∞–ª—å–±–æ–º–∞ —É—Å–ø–µ–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ—Ç—å
        # (–ø–æ –∂–µ–ª–∞–Ω–∏—é ‚Äî –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
        # import asyncio
        # await asyncio.sleep(0.5)

        album_msgs = await client.get_messages(msg.chat_id, min_id=msg.id - 50, max_id=msg.id + 50)
        album_msgs = [m for m in album_msgs if m and m.grouped_id == msg.grouped_id]
        album_msgs.sort(key=lambda x: x.id)
        for m in album_msgs:
            t = (m.text or "").strip()
            if t:
                return t
    return (msg.text or "").strip()

# @client.on(events.NewMessage(chats=channel_entities))
async def new_message_handler(event):
    bot = Bot(token=BOT_TOKEN)
    logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {event.chat.username or event.chat.title}")

    if event.message:
        msg = event.message

        key_msg = (msg.chat_id, msg.id)
        if key_msg in processed_message_ids:
            logger.info('Skip: already processed this message id')
            return
        processed_message_ids.add(key_msg)

        if getattr(msg, "grouped_id", None):
            key_album = (msg.chat_id, msg.grouped_id)
            if key_album in processed_group_ids:
                logger.info('Skip: album already processed')
                return
            processed_group_ids.add(key_album)
        text = await extract_text_from_event(event)
        media_items = await download_media(event.message)
        contacts = await process_contacts(text)
        if contacts and contacts.startswith("tg://user?id="):
            try:
                user_id = contacts.split("=", 1)[1]
            except Exception:
                user_id = None

            if user_id:
                fixed = await get_username_by_id(user_id)
                if fixed:
                    contacts = fixed  # –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π @username/—Å—Å—ã–ª–∫—É
                else:
                    logger.info("–ü—Ä–æ–ø—É—Å–∫: –∫–æ–Ω—Ç–∞–∫—Ç tg://‚Ä¶ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
                    return  # –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ/–ø–æ—Å—Ç
            else:
                logger.info("–ü—Ä–æ–ø—É—Å–∫: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç tg://user?id=‚Ä¶")
                return
        help_text = await asyncio.to_thread(process_text_with_gpt3, text)
        new_text = await asyncio.to_thread(process_text_with_gpt, text)
        new_text = new_text.replace("*", "\n\n")
        lines = [line.strip() for line in new_text.split("\n") if line.strip()]
        new_text = "\n\n".join(lines)
        # –ë–´–õ–û: —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–¥–∞"/"–æ—Ç–≤–µ—Ç: –¥–∞"
        if not _is_yes(help_text):
            new_text = '–Ω–µ—Ç'
        if _is_no(contacts):
            new_text = '–Ω–µ—Ç'
        print(new_text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        message = await sync_to_async(MESSAGE.objects.create)(
            text=text,
            images=[item['path'] for item in media_items] if media_items else None,
            new_text=new_text
        )

        if not (new_text.lower() in ['–Ω–µ—Ç', '–Ω–µ—Ç.']):
            if not (new_text.lower() in ['–Ω–µ—Ç', '–Ω–µ—Ç.']):
                new_text += "\n\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: " + contacts

                # üìå –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –≤ –∫–æ–Ω—Ü–µ
                new_text += (
                    "\n\n‚Äî <i>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ "
                    "<a href='https://t.me/arendatoriy_find_bot'>–±–æ—Ç–µ</a> "
                    "–∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã</i>"
                )
            address = process_text_with_gpt_adress(new_text)
            coords = get_coords_by_address(address)

            def parse_flat_area(value):
                try:
                    if isinstance(value, str):
                        value = ''.join(c for c in value if c.isdigit())
                        return int(value) if value else None
                    return int(value) if value is not None else None
                except (ValueError, TypeError):
                    return None

            flat_area = parse_flat_area(process_text_with_gpt_sq(new_text))

            info = await sync_to_async(INFO.objects.create)(
                message=message,
                price=process_text_with_gpt_price(new_text),
                count_meters_flat=flat_area,
                count_meters_metro=find_nearest_metro(*coords),
                location=get_district_by_coords(*coords),
                adress=address,
                rooms=process_text_with_gpt_rooms(new_text)
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            asyncio.create_task(check_subscriptions_and_notify(info, contacts))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram-–∫–∞–Ω–∞–ª
        if new_text.lower() not in ['–Ω–µ—Ç', '–Ω–µ—Ç.']:
            try:
                if media_items:
                    await send_media_group(bot, TELEGRAM_CHANNEL_ID, new_text, media_items)
                else:
                    await bot.send_message(
                        chat_id=TELEGRAM_CHANNEL_ID,
                        text=new_text,
                        parse_mode="HTML"
                    )
                logger.info(f"[CHANNEL] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {TELEGRAM_CHANNEL_ID}")
            except Exception as e:
                logger.error(f"[CHANNEL] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {TELEGRAM_CHANNEL_ID}: {e}", exc_info=True)


def _is_yes(s: str | None) -> bool:
    return bool(s) and re.match(r'^(–¥–∞|yes|y|true)\b', s.strip(), flags=re.I)

def _is_no(s: str | None) -> bool:
    return bool(s) and re.match(r'^(–Ω–µ—Ç|no|n|false)\b', s.strip(), flags=re.I)



async def main():
    try:
        await client.connect()
        if not await client.is_user_authorized():
            await client.send_code_request(PHONE_NUMBER)
            code = input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ')
            try:
                await client.sign_in(PHONE_NUMBER, code)
            except telethon.errors.SessionPasswordNeededError:
                password = os.getenv('TELEGRAM_PASSWORD')
                await client.sign_in(password=password)

        CHANNEL_USERNAMES = [
            "keystomoscow", "arendamsc", "onmojetprogat", "loltestneedxenaship",
            "arendamsk_mo", "lvngrm_msk", "Sdat_Kvartiru0", "bestflats_msk", "nebabushkin_msk",
        ]
        try:
            channel_entities = await asyncio.gather(
                *[client.get_entity(u) for u in CHANNEL_USERNAMES]
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return

        @client.on(events.NewMessage(chats=channel_entities))
        async def handler_wrapper(event):
            await new_message_handler(event)

        async with client:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã...")
            await client.run_until_disconnected()

    finally:
        # —Å–Ω–∏–º–∞–µ–º PID-–ª–æ–∫ –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        if os.path.exists("bot.pid"):
            os.unlink("bot.pid")


if __name__ == "__main__":
    asyncio.run(main())