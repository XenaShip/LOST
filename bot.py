import os
import asyncio
import random
import logging
import re
import time
from datetime import datetime
from telegram import InputMediaVideo
import telethon
from aiogram import Bot
import django
import requests
from anyio import current_time
from django.utils.regex_helper import contains
from telegram import Bot, InputMediaPhoto
from telegram.error import RetryAfter
from telethon import TelegramClient, events
from dotenv import load_dotenv
from asgiref.sync import sync_to_async
from django.core.files.base import ContentFile
from django.core.files.storage import default_storage
from yandex_cloud_ml_sdk import YCloudML
import sys
import os

from bot_cian import message_handler
from district import get_district_by_coords, get_coords_by_address
from make_info import process_text_with_gpt_price, process_text_with_gpt_sq, process_text_with_gpt_adress, \
    process_text_with_gpt_rooms
from meters import get_coordinates, find_nearest_metro
from proccess import process_text_with_gpt2, process_text_with_gpt3, process_text_with_gpt

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()

from main.models import MESSAGE, INFO, Subscription  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

bot2 = Bot(token=os.getenv("TOKEN3"))
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PHONE_NUMBER = os.getenv('PHONE_NUMBER')
TELEGRAM_PASSWORD = os.getenv('TELEGRAM_PASSWORD')
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
SESSION_NAME = "session_name_lost"

TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
YANDEX_GPT_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
DOWNLOAD_FOLDER = "downloads/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon
client = TelegramClient(SESSION_NAME, API_ID, API_HASH, system_version='1.2.3-zxc-custom',
                        device_model='aboba-linux-custom', app_version='1.0.1')


async def get_username_by_id(user_id):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        user_id = int(user_id)
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await client.get_entity(user_id)
        if user.username:
            return f"https://t.me/{user.username}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username: {e}")
    return None  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username


async def process_contacts(text):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ GPT
    raw_contact = await asyncio.to_thread(process_text_with_gpt2, text)
    print('process')

    # –ï—Å–ª–∏ —ç—Ç–æ tg:// —Å—Å—ã–ª–∫–∞ - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
    if raw_contact.startswith("tg://user?id="):
        user_id = raw_contact.split("=")[1]
        return await get_username_by_id(user_id) or raw_contact

    return raw_contact


async def download_media(message):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ) –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–ª—å–±–æ–º–æ–≤ (–ø–æ grouped_id).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {'type': 'photo'/'video', 'path': –ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É'}.
    """
    media_list = []
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º grouped_id
    if message.grouped_id:
        album_msgs = await client.get_messages(
            message.chat_id,
            min_id=message.id - 20,
            max_id=message.id + 20
        )
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–≥–æ –∂–µ –∞–ª—å–±–æ–º–∞
        album_msgs = [m for m in album_msgs if m and m.grouped_id == message.grouped_id]
    else:
        album_msgs = [message]

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∞–ª—å–±–æ–º–∞
    for msg in album_msgs:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
        if msg.photo:
            file_path = await client.download_media(msg.photo, DOWNLOAD_FOLDER)
            if file_path:
                media_list.append({'type': 'photo', 'path': file_path})
        elif msg.video:
            file_path = await client.download_media(msg.video, DOWNLOAD_FOLDER)
            if file_path:
                media_list.append({'type': 'video', 'path': file_path})
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    return media_list[:10]


async def send_media_group(bot, chat_id, text, media_items):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ) –≤ –æ–¥–Ω–æ–º media_group.
    –ü–æ–¥–ø–∏—Å—å (text) –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.
    """
    if not media_items:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await bot.send_message(chat_id, text)
        return

    media_group = []
    open_files = []
    for idx, item in enumerate(media_items):
        file_path = item['path']
        if not os.path.exists(file_path):
            continue
        f = open(file_path, 'rb')
        open_files.append(f)
        # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å
        caption = text if idx == 0 else None
        if item['type'] == 'photo':
            media = InputMediaPhoto(media=f, caption=caption)
        else:
            media = InputMediaVideo(media=f, caption=caption)
        media_group.append(media)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º media_group. –¢—Ä–µ–±—É–µ—Ç—Å—è 2‚Äì10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤:contentReference[oaicite:3]{index=3}.
    if len(media_group) == 1:
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ–±—ã—á–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
        m = media_group[0]
        if isinstance(m, InputMediaPhoto):
            await bot.send_photo(chat_id, m.media, caption=text)
        else:
            await bot.send_video(chat_id, m.media, caption=text)
    else:
        await bot.send_media_group(chat_id=chat_id, media=media_group)
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    for f in open_files:
        f.close()


async def send_images_with_text(bot, chat_id, text, images):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram, –ø–µ—Ä–≤–æ–µ —Å —Ç–µ–∫—Å—Ç–æ–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ–∑."""
    media_group = []
    open_files = []  # –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –∏—Ö –Ω–µ –∑–∞–∫—Ä—ã–ª `with open`

    for index, image_path in enumerate(images):
        if os.path.exists(image_path):
            img_file = open(image_path, "rb")  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            open_files.append(img_file)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è

            if index == 0:
                media_group.append(InputMediaPhoto(media=img_file, caption=text))
            else:
                media_group.append(InputMediaPhoto(media=img_file))

    if media_group:
        await bot.send_media_group(chat_id=chat_id, media=media_group)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    for img_file in open_files:
        img_file.close()


async def download_images(message):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –∞–ª—å–±–æ–º)"""
    images = []  # –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ

    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å—é –∞–ª—å–±–æ–º–∞
    if message.grouped_id:
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º –∂–µ `grouped_id`
        album_messages = await client.get_messages(message.chat_id, min_id=message.id - 10, max_id=message.id + 10)
        photos = [msg.photo for msg in album_messages if msg.photo]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
    else:
        # –ï—Å–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        photos = [message.photo] if message.photo else []

    # 2Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    for photo in photos:
        file_path = await client.download_media(photo, DOWNLOAD_FOLDER)
        if file_path:
            images.append(file_path)


async def check_subscriptions_and_notify(info_instance):
    logger.info(f"üîî –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {info_instance.id}")
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    subscriptions = await sync_to_async(list)(Subscription.objects.filter(is_active=True))
    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(subscriptions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
    if not subscriptions:
        logger.info("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    ad_data = {
        'price': info_instance.price,
        'rooms': info_instance.rooms,
        'count_meters_flat': info_instance.count_meters_flat,  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –ø–ª–æ—â–∞–¥–∏
        'location': info_instance.location,
        'count_meters_metro': info_instance.count_meters_metro,
        'address': info_instance.adress,
        'images': info_instance.message.images,
        'description': info_instance.message.new_text
    }
    for subscription in subscriptions:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {subscription.user_id})")
        is_match = await sync_to_async(is_ad_match_subscription)(ad_data, subscription)
        if is_match:
            logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}")
            await send_notification(subscription.user_id, ad_data, info_instance.message)
        else:
            logger.info(f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}")


def escape_markdown(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def safe_parse_number(value):
    if value is None:
        return None
    if isinstance(value, str):
        value = value.replace(',', '.').strip()
        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É
        value = ''.join(c for c in value if c.isdigit() or c == '.')
    try:
        return float(value)
    except:
        return None


async def send_notification(user_id: int, ad_data: dict, message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (aiogram v3)

    """
    try:
        safe_text = message.new_text

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if "–ö–æ–Ω—Ç–∞–∫—Ç—ã" not in safe_text:
            contacts = await asyncio.to_thread(process_text_with_gpt2, message.text)
            if contacts and contacts.lower() not in ['–Ω–µ—Ç', '–Ω–µ—Ç.']:
                safe_text += " –ö–æ–Ω—Ç–∞–∫—Ç—ã: " + contacts

        media_paths = ad_data.get('images') or []
        media_group = []

        for idx, media_path in enumerate(media_paths[:10]):
            caption = safe_text if idx == 0 else None

            # Aiogram v3 —Ç—Ä–µ–±—É–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            if str(media_path).startswith("http"):
                media_group.append(InputMediaPhoto(media=media_path, caption=caption))
            elif os.path.exists(media_path):
                # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, aiogram —Å–∞–º –æ—Ç–∫—Ä–æ–µ—Ç –ø–æ –ø—É—Ç–∏
                media_group.append(InputMediaPhoto(media=open(media_path, "rb"), caption=caption))
        await asyncio.sleep(5)
        if media_group:
            if len(media_group) == 1:
                await bot2.send_photo(chat_id=user_id, photo=media_group[0].media, caption=safe_text)
            else:
                await bot2.send_media_group(chat_id=user_id, media=media_group)
        else:
            await bot2.send_message(chat_id=user_id, text=safe_text)

        logger.info(f"[NOTIFY] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except RetryAfter as e:
        logger.warning(f"[NOTIFY] Flood control, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {e.timeout} —Å–µ–∫.")
        await asyncio.sleep(e.timeout)
        await send_notification(user_id, ad_data, message)
    except Exception as e:
        logger.error(f"[NOTIFY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)


def is_ad_match_subscription(ad_data, subscription):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç:
      - 0 –∫–æ–º–Ω–∞—Ç = —Å—Ç—É–¥–∏—è (–ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è –∫ 1 –∫–æ–º–Ω–∞—Ç–µ)
      - 0 –º¬≤ = –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
      - –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω (None –∏–ª–∏ 'ANY'), –æ–Ω –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
    """
    try:
        ad_price = safe_parse_number(ad_data.get('price'))
        ad_rooms = safe_parse_number(ad_data.get('rooms'))
        ad_flat_area = safe_parse_number(ad_data.get('count_meters_flat'))
        ad_metro_distance = safe_parse_number(ad_data.get('count_meters_metro'))

        # –°—Ç—É–¥–∏–∏ (0 –∫–æ–º–Ω–∞—Ç) —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 1 –∫–æ–º–Ω–∞—Ç—É
        if ad_rooms == 0:
            ad_rooms = 1

        # –¶–µ–Ω–∞
        if subscription.min_price is not None and ad_price is not None and ad_price < subscription.min_price:
            return False
        if subscription.max_price is not None and ad_price is not None and ad_price > subscription.max_price:
            return False

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
        if subscription.min_rooms is not None and ad_rooms is not None and int(ad_rooms) < subscription.min_rooms:
            return False
        if subscription.max_rooms is not None and ad_rooms is not None and int(ad_rooms) > subscription.max_rooms:
            return False

        # –ü–ª–æ—â–∞–¥—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ >0
        if ad_flat_area and subscription.min_flat is not None and ad_flat_area < subscription.min_flat:
            return False
        if ad_flat_area and subscription.max_flat is not None and ad_flat_area > subscription.max_flat:
            return False

        # –†–∞–π–æ–Ω
        if subscription.district not in (None, 'ANY') and ad_data.get('location') != subscription.district:
            return False

        # –ú–µ—Ç—Ä–æ
        if ad_metro_distance is not None and subscription.max_metro_distance is not None \
           and ad_metro_distance > subscription.max_metro_distance:
            return False

        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {e}")
        return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}", exc_info=True)
        return False


# @client.on(events.NewMessage(chats=channel_entities))
async def new_message_handler(event):
    bot = Bot(token=BOT_TOKEN)
    logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {event.chat.username or event.chat.title}")

    if event.message:
        text = event.message.text or ""
        media_items = await download_media(event.message)
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å Yandex GPT
        contacts = await process_contacts(text)
        print(contacts)
        help_text = await asyncio.to_thread(process_text_with_gpt3, text)
        print(help_text)

        new_text = await asyncio.to_thread(process_text_with_gpt, text)
        print(new_text)

        new_text = new_text.replace("*", "\n")
        if not (help_text.strip().lower().startswith("–¥–∞") or help_text.strip().lower().startswith("–æ—Ç–≤–µ—Ç: –¥–∞")):
            new_text = '–Ω–µ—Ç'
        if contacts.strip().lower().startswith("–Ω–µ—Ç") or contacts.strip().lower().startswith("–æ—Ç–≤–µ—Ç: –Ω–µ—Ç"):
            new_text = '–Ω–µ—Ç'
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {new_text}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        message = await sync_to_async(MESSAGE.objects.create)(
            text=text,
            images=[item['path'] for item in media_items] if media_items else None,
            new_text=new_text
        )

        if not (new_text.lower() in ['–Ω–µ—Ç', '–Ω–µ—Ç.']):
            new_text += "\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: " + contacts

            address = process_text_with_gpt_adress(new_text)
            coords = get_coords_by_address(address)

            def parse_flat_area(value):
                try:
                    if isinstance(value, str):
                        value = ''.join(c for c in value if c.isdigit())
                        return int(value) if value else None
                    return int(value) if value is not None else None
                except (ValueError, TypeError):
                    return None

            flat_area = parse_flat_area(process_text_with_gpt_sq(new_text))

            info = await sync_to_async(INFO.objects.create)(
                message=message,
                price=process_text_with_gpt_price(new_text),
                count_meters_flat=flat_area,
                count_meters_metro=find_nearest_metro(*coords),
                location=get_district_by_coords(*coords),
                adress=address,
                rooms=process_text_with_gpt_rooms(new_text)
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            asyncio.create_task(check_subscriptions_and_notify(info))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram-–∫–∞–Ω–∞–ª
        if new_text.lower() not in ['–Ω–µ—Ç', '–Ω–µ—Ç.']:
            if media_items:
                await send_media_group(bot, TELEGRAM_CHANNEL_ID, new_text, media_items)
            else:
                await bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=new_text)

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await asyncio.sleep(5)


def check_running():
    pid_file = "bot.pid"
    if os.path.exists(pid_file):
        with open(pid_file, "r") as f:
            old_pid = f.read()
        if os.path.exists(f"/proc/{old_pid}"):  # –î–ª—è Linux
            print("Already running!")
            sys.exit(1)
        # –î–ª—è Windows (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞):
        try:
            os.kill(int(old_pid), 0)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            sys.exit(1)
        except (ProcessLookupError, ValueError):
            pass  # –ü—Ä–æ—Ü–µ—Å—Å —É–º–µ—Ä, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å

    with open(pid_file, "w") as f:
        f.write(str(os.getpid()))


async def main():
    check_running()
    try:
        await client.connect()
        if not await client.is_user_authorized():
            await client.send_code_request(PHONE_NUMBER)
            code = input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ')
            try:
                await client.sign_in(PHONE_NUMBER, code)
            except telethon.errors.SessionPasswordNeededError:
                password = os.getenv('TELEGRAM_PASSWORD')
                await client.sign_in(password=password)

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ username
        CHANNEL_USERNAMES = [
            "keystomoscow",
            "arendamsc",
            "onmojetprogat",
            "loltestneedxenaship",
            "arendamsk_mo",
            "lvngrm_msk",
            "Sdat_Kvartiru0",
            "bestflats_msk",
            "nebabushkin_msk",
        ]

        try:
            channel_entities = await asyncio.gather(*[client.get_entity(username) for username in CHANNEL_USERNAMES])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return
    finally:
        if os.path.exists("bot.pid"):
            os.unlink("bot.pid")

    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –≤—Ä—É—á–Ω—É—é
    @client.on(events.NewMessage(chats=channel_entities))
    async def handler_wrapper(event):
        await new_message_handler(event)

    async with client:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã...")
        await client.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())