import requests
import json
import os
from celery import shared_task
from django.conf import settings
from .models import MESSAGE
from telegram import Bot, InputMediaPhoto

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
YANDEX_GPT_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")


@shared_task
def process_and_send_messages():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ Celery: –±–µ—Ä–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î, –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ—Ç —Å Yandex GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram."""

    messages = MESSAGE.objects.filter(sent=False)  # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ

    if not messages.exists():
        return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."

    bot = Bot(token=TELEGRAM_BOT_TOKEN)

    for message in messages:
        try:
            # –ü—Ä–æ—Å–∏–º Yandex GPT –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ —à–∞–±–ª–æ–Ω—É
            formatted_text = rewrite_text_with_yandex_gpt(message.text)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑–≤–ª–µ—á–µ–Ω—ã
            if "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:" not in formatted_text or "–ö–æ–Ω—Ç–∞–∫—Ç—ã:" not in formatted_text:
                message.sent = True  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                message.save()
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = f"üè† *–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!*\n\n{formatted_text}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if message.images:
                images = json.loads(message.images) if isinstance(message.images, str) else message.images
                if images:
                    media_group = [InputMediaPhoto(media=image_url) for image_url in images]
                    bot.send_media_group(chat_id=TELEGRAM_CHANNEL_ID, media=media_group)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=message_text, parse_mode="Markdown")

            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            message.sent = True
            message.save()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")

    return "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã."


def rewrite_text_with_yandex_gpt(text):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ Yandex GPT –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_GPT_API_KEY}",
        "Content-Type": "application/json"
    }

    prompt = (
        f"–ò–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]\n"
        f"- –ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]\n"
        f"- –¶–µ–Ω–∞: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]\n"
        f"- –£—Å–ª–æ–≤–∏—è: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]\n"
        f"- –ö–æ–Ω—Ç–∞–∫—Ç—ã: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]\n\n"
        f"–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {text}"
    )

    data = {
        "modelUri": "gpt://b1gbmcevaimcqghhpuu7/yandexgpt-lite",
        "completionOptions": {"stream": False, "temperature": 0.7, "maxTokens": 200},
        "messages": [{"role": "user", "text": prompt}]
    }

    response = requests.post(url, json=data, headers=headers)

    if response.status_code == 200:
        result = response.json()
        return result['result']['alternatives'][0]['message']['text']
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ Yandex GPT: {response.status_code}, {response.text}")
