import os
import django
import requests
import json
from django.core.management.base import BaseCommand
from dotenv import load_dotenv
from telegram import Bot, InputMediaPhoto
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes

load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º –º–æ–¥–µ–ª–µ–π
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")  # –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
django.setup()

from main.models import MESSAGE  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex GPT
def rewrite_text_with_yandex_gpt(text, api_key):
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }
    prompt = (
        f"–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–æ–º–Ω–∞—Ç, –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏, —Ü–µ–Ω–µ, —É—Å–ª–æ–≤–∏—è—Ö –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö.\n"
        f"–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]\n"
        f"- –ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]\n"
        f"- –¶–µ–Ω–∞: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]\n"
        f"- –£—Å–ª–æ–≤–∏—è: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]\n"
        f"- –ö–æ–Ω—Ç–∞–∫—Ç—ã: [–∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]\n\n"
        f"–¢–µ–∫—Å—Ç: {text}"
    )
    data = {
        "modelUri": "gpt://b1gbmcevaimcqghhpuu7/yandexgpt-lite",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Folder ID –∏ –∏–º—è –º–æ–¥–µ–ª–∏
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 200
        },
        "messages": [
            {"role": "user", "text": prompt}
        ]
    }
    response = requests.post(url, json=data, headers=headers)
    if response.status_code == 200:
        result = response.json()
        if 'result' in result and 'alternatives' in result['result']:
            return result['result']['alternatives'][0]['message']['text']
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ Yandex GPT: –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {result}")
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ Yandex GPT: {response.status_code}, {response.text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_to_telegram_channel(message_text, images, bot_token, channel_id):
    bot = Bot(token=bot_token)
    if images:
        try:
            # –ï—Å–ª–∏ images ‚Äî —ç—Ç–æ JSON-—Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫
            if isinstance(images, str):
                images = json.loads(images)
            if isinstance(images, list) and images:
                media_group = [InputMediaPhoto(media=image_url) for image_url in images]
                bot.send_media_group(chat_id=channel_id, media=media_group)
        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.")
    bot.send_message(chat_id=channel_id, text=message_text, parse_mode="Markdown")

# Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
class Command(BaseCommand):
    help = "–ë–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram-–∫–∞–Ω–∞–ª"

    def handle(self, *args, **kwargs):
        self.stdout.write("–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞")  # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤–æ–æ–±—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        YANDEX_GPT_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
        TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
        TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")

        self.stdout.write(f"API-–∫–ª—é—á: {YANDEX_GPT_API_KEY}")  # –ü—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.stdout.write(f"–ë–æ—Ç-—Ç–æ–∫–µ–Ω: {TELEGRAM_BOT_TOKEN}")
        self.stdout.write(f"–ö–∞–Ω–∞–ª: {TELEGRAM_CHANNEL_ID}")

        if not all([YANDEX_GPT_API_KEY, TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID]):
            self.stdout.write(self.style.ERROR("–ù–µ –∑–∞–¥–∞–Ω—ã –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!"))
            return

        self.stdout.write("–ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã...")
        messages = MESSAGE.objects.filter(sent=False)

        if not messages.exists():
            self.stdout.write("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        for message in messages:
            self.stdout.write(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}...")

            try:
                formatted_text = rewrite_text_with_yandex_gpt(message.text, YANDEX_GPT_API_KEY)

                if "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:" not in formatted_text or "–ö–æ–Ω—Ç–∞–∫—Ç—ã:" not in formatted_text:
                    message.sent = True
                    message.save()
                    self.stdout.write(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É).")
                    continue

                message_text = f"üè† *–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!*\n\n{formatted_text}"
                send_to_telegram_channel(message_text, message.images, TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID)

                message.sent = True
                message.save()
                self.stdout.write(self.style.SUCCESS(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}"))