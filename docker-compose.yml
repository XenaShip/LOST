services:
  db:
    image: postgres:16-alpine
    networks:
      - app_network
    restart: on-failure
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      timeout: 5s

  bot1:
    build:
      context: .
      dockerfile: Dockerfile.bot
    networks:
      - app_network
    tty: true
    command: sh -c "sleep 5 && python manage.py migrate && python bot.py"
    depends_on:
      db:
        condition: service_healthy
    container_name: bot1_container
    #restart: always

  bot2:
    build:
      context: .
      dockerfile: Dockerfile.bot_3_2
    networks:
      - app_network
    tty: true
    command: sh -c "python manage.py migrate && python bot_3_2.py"
    depends_on:
      db:
        condition: service_healthy
    container_name: bot2_container
    #restart: always

  bot3:
    build:
      context: .
      dockerfile: Dockerfile.bot_cian
    networks:
      - app_network
    tty: true
    command: sh -c "python manage.py migrate && python bot_cian.py"
    depends_on:
      db:
        condition: service_healthy
    container_name: bot3_container
    #restart: always

networks:
  app_network:
    driver: bridge

volumes:
  pg_data: